// Copyright by Barry G. Becker, 2013. Licensed under MIT License: http://www.opensource.org/licenses/MIT

/**
 * This common gradle build file is used to publish bb4 artifacts.
 * Any project on github can include it using
 * apply from: 'https://raw.github.com/barrybecker4/bb4-common/master/bb4-publish.gradle'
 */

/** javadoc jar used for the whole project. Used only if appMap was not specified. */
task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Create a jar file containing all project javadoc. Needed by Sonatype release.'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/** sources jar used for the whole project. Used only if appMap was not specified. */
task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Create a jar file containing all project sources. Needed by Sonatype release.'
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.doLast {
    description = 'Copy images from source to javadoc in case they are referenced by documentation'
    copy {
        from sourceSets.main.allSource
        into javadoc.destinationDir
        include '**/package.png'
    }
}

/**
 * If a project has multiple apps, it should define them
 * in a map called appMap before applying this bb4-publish.gradle file.
 * Skip building the default jars that contains everything if there is a specific list
 */
if (hasProperty('appMap')) {
    jar.enabled = false
    sourcesJar.enabled = false
    javadocJar.enabled = false
} else {
    ext.appMap = new HashMap()
}

/** create jar, javadocJar, and sourceJar for every entry in appMap (if there are any). */
appMap.each { String key, Map value ->
    task "${key}Jar"(type: Jar)  {
        baseName = "bb4-${key}"
        from sourceSets.main.output
        value['include'].each { pattern -> include pattern }
        if (value.containsKey('exclude'))
            value['exclude'].each { pattern -> include pattern }
        manifest {
            attributes 'Implementation-Title': '$key code',
                'Implementation-Version': version,
                provider: 'gradle'
        }
    }
    task "${key}JavadocJar"(type: Jar, dependsOn: javadoc) {
        description = "Create a javadoc jar file for ${key}. Needed for publishing to Sonatype."
        classifier = 'javadoc'
        baseName = "bb4-${key}"
        from javadoc.destinationDir
        value['include'].each { pattern -> include pattern }
    }
    task "${key}SourcesJar"(type: Jar, dependsOn: classes) {
        description = "Create a source jar file for ${key}. Needed for publishing to Sonatype."
        classifier = 'sources'
        baseName = "bb4-${key}"
        from sourceSets.main.allSource
        value['include'].each { pattern -> include pattern }
        if (value.containsKey('exclude'))
            value['exclude'].each { pattern -> include pattern }
    }
}

/**
 * These artifacts need to be published so other projects can depend on them.
 * The default jar is only include if there is not an explicit appMap.
 */
artifacts {
    if (appMap.size() == 0) {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    appMap.each { String key, Map value ->
        archives tasks["${key}Jar"]
        archives tasks["${key}JavadocJar"]
        archives tasks["${key}SourcesJar"]
    }
}

/** Config for non-core artifacts like asc (signing) files. *
def ascPomConfig = {
    name "${archivesBaseName}"
    groupId 'com.barrybecker4'
    description "${archivesBaseName}"
    url "https://github.com/barrybecker4/${archivesBaseName}"
} */

/** bb4 pom configuration for core jar artifacts */
def jarPomConfig = {
    name "${archivesBaseName}"
    groupId 'com.barrybecker4'
    packaging 'jar'
    description "bb4 ${archivesBaseName} java code."
    url "https://github.com/barrybecker4/${archivesBaseName}"
    inceptionYear '2013'

    // workaround to get changing snapshots to be updated.
    // Maybe not needed if --refresh-dependencies is used.
    properties {
       'timestamp' String.valueOf(System.currentTimeMillis())
    }

    scm {
        url "scm:git@github.com:barrybecker4/${archivesBaseName}.git"
        connection "scm:git@github.com:barrybecker4/${archivesBaseName}.git"
        developerConnection "scm:git@github.com:barrybecker4/${archivesBaseName}.git"
    }

    licenses {
        license {
            name 'The MIT license'
            url 'http://www.opensource.org/licenses/MIT'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'barrybecker4'
            name 'Barry Becker'
            email 'barrybecker4@yahoo.com'
        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom.project jarPomConfig
}

/**
 * Used to publish artifacts to Sonatype repository
 * See http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
 * Go to https://oss.sonatype.org to view staged repositories after publishing.
 */
uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project jarPomConfig

            // creates filters for each jar produced by appMap entries (if any)
            appMap.each { String key, Map value ->
                def jarName = "bb4-$key"
                def jarPom = addFilter("${key}Jar") { artifact, file ->
                    artifact.name == jarName
                }
                jarPom.project jarPomConfig
                jarPom.artifactId = jarName
                jarPom.name = jarName

                def ascPom = addFilter("${key}Jar.asc") { artifact, file ->
                    artifact.name == "bb4-${key}-${version}.jar.asc"
                }
                ascPom.project jarPomConfig
                ascPom.artifactId = jarName
                ascPom.name = 'asc-' + jarName

                def ascJavadocPom = addFilter("${key}JavadocJar.asc") { artifact, file ->
                    artifact.name == "bb4-${key}-${version}-javadoc.jar.asc"
                }
                ascJavadocPom.project jarPomConfig
                ascJavadocPom.artifactId = jarName
                ascJavadocPom.name = 'javadoc-' + jarName

                def ascSourcesPom = addFilter("${key}SourcesJar.asc") { artifact, file ->
                    artifact.name == "bb4-${key}-${version}-sources.jar.asc"
                }
                ascSourcesPom.project jarPomConfig
                ascSourcesPom.artifactId = jarName
                ascSourcesPom.name = 'sources-' + jarName
            }
        }
    }
}

/** release jars need to be signed when published to sonatype so the publisher can be verified. */
signing {
    required { isReleaseVersion }
    if (appMap.size() == 0)  {
        sign jar
        sign sourcesJar
        sign javadocJar
    }

    appMap.each { String key, Map value ->
        sign tasks["${key}Jar"]
        sign tasks["${key}JavadocJar"]
        sign tasks["${key}SourcesJar"]
    }
}

/** Effectively the same as uploadArchives, but I like this name better */
task publishArtifacts (dependsOn:uploadArchives) {
    description = 'Publish artifacts to Sonatype repository'
}