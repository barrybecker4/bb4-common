<?xml version="1.1" encoding="UTF-8"?>
<testsuite name="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" tests="19" failures="0" errors="0" timestamp="1970-01-01T00:00:00" hostname="Tesujisoft3" time="1.373213682301E9">
  <properties/>
  <testcase name="testXOnlyExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0050"/>
  <testcase name="testNegXExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testConstantIntOnlyExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testNegativeConstantIntExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testNegativeConstantDecimalExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testScaledXExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testScaledXExpWithSpaces" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testXsquaredExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0040"/>
  <testcase name="testXtimesNegXExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testXRaisedToXMinus3XExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testXRaisedToNegXMinus3XExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testXXXExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testXCubedMinusXCubedExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testParenExpMinus3" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0010"/>
  <testcase name="test3MinusParenExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0010"/>
  <testcase name="testXMinus2" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0010"/>
  <testcase name="test2MinusX" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0010"/>
  <testcase name="test5X" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0"/>
  <testcase name="testComplexNestedExp" classname="com.barrybecker4.common.expression.mathexpression.MathExpressionParserTest" time="0.0050"/>
  <system-out><![CDATA[nodes=[x] ops=[EXPONENT]
nodes=[x] ops=[TIMES, DIVIDE]
nodes=[x] ops=[PLUS, MINUS]
nodes=[x] ops=[EXPONENT]
nodes=[x] ops=[TIMES, DIVIDE]
nodes=[x] ops=[PLUS, MINUS]
nodes=[5.0] ops=[EXPONENT]
nodes=[5.0] ops=[TIMES, DIVIDE]
nodes=[5.0] ops=[PLUS, MINUS]
nodes=[-5.0] ops=[EXPONENT]
nodes=[-5.0] ops=[TIMES, DIVIDE]
nodes=[-5.0] ops=[PLUS, MINUS]
nodes=[-5.3] ops=[EXPONENT]
nodes=[-5.3] ops=[TIMES, DIVIDE]
nodes=[-5.3] ops=[PLUS, MINUS]
nodes=[2.3, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[2.3, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, *, -1, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, ^, x, -, 3.0, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, ^, -1, *, x, -, 3.0, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, *, x, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, ^, 3.0, -, x, ^, 3.0] ops=[EXPONENT]
nodes=[^] ops=[TIMES, DIVIDE]
nodes=[^] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 1.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[+, -, 3.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 1.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[3.0, -, +] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[x, -, 2.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[2.0, -, x] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[5.0, *, x] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
nodes=[x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[x, +, /, /, /] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[1.0, +, /, /, /, +, /] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[2.0, *, x, +, 4.0] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[x, ^, 2.0, -, 1.0] ops=[EXPONENT]
nodes=[-] ops=[TIMES, DIVIDE]
nodes=[-] ops=[PLUS, MINUS]
nodes=[+, /, -] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[x, +, /, /, /] ops=[EXPONENT]
nodes=[/] ops=[TIMES, DIVIDE]
nodes=[/] ops=[PLUS, MINUS]
nodes=[1.0, +, /, /, /, +, /] ops=[EXPONENT]
nodes=[+] ops=[TIMES, DIVIDE]
nodes=[+] ops=[PLUS, MINUS]
nodes=[+, *, +] ops=[EXPONENT]
nodes=[*] ops=[TIMES, DIVIDE]
nodes=[*] ops=[PLUS, MINUS]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
